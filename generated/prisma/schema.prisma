// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  bio       String?   @db.Text
  avatar    String?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model Blog {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  status    BlogStatus @default(DRAFT)
  views     Int        @default(0)
  slug      String     @unique
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("blogs")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())

  @@map("tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
  @@map("likes")
}

enum UserRole {
  USER
  ADMIN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
